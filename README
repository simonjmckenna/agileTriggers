########################################################################
# Copyright 2020 Simon McKenna.
#
# Licensed under the Apache License, Version 2.0 (the "License");
#    You may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
########################################################################

The agileTriggers application is made up of 4 key components 3 driven 
via Crontab and a fourth web application. 

The web application 
Is a flask based web application to show daily agile data (cost per Kw/h per
half hour period after these are released by Ocotpus daily, as well as 24 hours after 
the day is complete the measured usage in Kw/h in each period. 

The getrates component uses REST API calls to get data from Octopus energy
about forward pricing for it's Agile Tarriff.  This data is stored in a 
Sqlite database The pricing component is updated daily, the program runs under 
crontab to  get the data.

The getUsage component runs again daily to load into the same database table 
generated by agileTriggers historic usage of a specific meter in the time 
slots loaded. 

The checktriggers component runs every half hour on the hour and half hour as 
driven by crontab. The list of triggers is stored in the same database as 
agileTriggers & getUsage. The triggers are managed via the triggers utility. 

These 4 tools use the agile.py triggers.py config.py and logger.py modules
nd  sqlite3 database.

agile.py drives the database and makes REST API calls to Octopus

triggers.py drives the database and manages the trigger files

config.py processes the .agiletriggers.ini file in the use home directory. This
file holds configuration variables for the suite of tools. 

logger.py uses python logger to log tracing to  set of logifles for debug information if 
the debug is turned on in the config file

TO DO:

1) write a trigger handler - this will probably be something to call ardevd's jlrpy library 
   to turn on and off my ipace charging based on agile triggers. Either that or something to 
   manage meross smartplugs.
  
2) Show/edit the triggers in the web app.

3) Put some security on the app.

4) Tidy up the web app - the web pages are fairly basic at the moment. 

5) improve the graphing - get previous months, daily graphs etc.

6) write some ore user info. 
